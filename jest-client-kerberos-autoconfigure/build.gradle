plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    implementation project(":elastic-compatible-api")

    implementation libraries.jestclient
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "$project.group"
            artifactId "$project.name"
            version "$project.version"

            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "${project.name}"
                description = 'A kerberos authentication based on JAAS for spring autoconfigure.'
                url = 'https://github.com/lawyerance/kerberos-authentication'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'lawyerance'
                        name = 'lawyerance'
                        email = 'lawyerance@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/lawyerance/kerberos-authentication.git'
                    developerConnection = 'scm:git:ssh://github.com/lawyerance/kerberos-authentication.git'
                    url = 'https://github.com/lawyerance/kerberos-authentication'
                }
            }
        }

    }

    repositories {
        mavenLocal()
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}